(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{372:function(s,t,a){"use strict";a.r(t);var e=a(8),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"执行一条-select-语句-期间发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行一条-select-语句-期间发生了什么"}},[s._v("#")]),s._v(" 执行一条 select 语句，期间发生了什么？")]),s._v(" "),t("p",[s._v("大家好，我是小林。")]),s._v(" "),t("p",[s._v("学习 SQL 的时候，大家肯定第一个先学到的就是 select 查询语句了，比如下面这句查询语句：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在 product 表中，查询 id = 1 的记录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("但是有没有想过，"),t("strong",[s._v("MySQL 执行一条 select 查询语句，在 MySQL 中期间发生了什么？")])]),s._v(" "),t("p",[s._v("带着这个问题，我们可以很好的了解 MySQL 内部的架构，所以这次小林就带大家拆解一下 MySQL 内部的结构，看看内部里的每一个“零件”具体是负责做什么的。")]),s._v(" "),t("h2",{attrs:{id:"mysql-执行流程是怎样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-执行流程是怎样的"}},[s._v("#")]),s._v(" MySQL 执行流程是怎样的？")]),s._v(" "),t("p",[s._v("先来一个上帝视角图，下面就是 MySQL 执行一条 SQL 查询语句的流程，也从图中可以看到 MySQL 内部架构里的各个功能模块。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/mysql%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B.png",alt:"查询语句执行流程"}})]),s._v(" "),t("p",[s._v("可以看到， MySQL 的架构共分为两层："),t("strong",[s._v("Server 层和存储引擎层")]),s._v("，")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Server 层负责建立连接、分析和执行 SQL")]),s._v("。MySQL 大多数的核心功能模块都在这实现，主要包括连接器，查询缓存、解析器、预处理器、优化器、执行器等。另外，所有的内置函数（如日期、时间、数学和加密函数等）和所有跨存储引擎的功能（如存储过程、触发器、视图等。）都在 Server 层实现。")]),s._v(" "),t("li",[t("strong",[s._v("存储引擎层负责数据的存储和提取")]),s._v("。支持 InnoDB、MyISAM、Memory 等多个存储引擎，不同的存储引擎共用一个 Server 层。现在最常用的存储引擎是 InnoDB，从 MySQL 5.5 版本开始， InnoDB 成为了 MySQL 的默认存储引擎。我们常说的索引数据结构，就是由存储引擎层实现的，不同的存储引擎支持的索引类型也不相同，比如 InnoDB 支持索引类型是 B+树 ，且是默认使用，也就是说在数据表中创建的主键索引和二级索引默认使用的是 B+ 树索引。")])]),s._v(" "),t("p",[s._v("好了，现在我们对 Server 层和存储引擎层有了一个简单认识，接下来，就详细说一条 SQL 查询语句的执行流程，依次看看每一个功能模块的作用。")]),s._v(" "),t("h2",{attrs:{id:"第一步-连接器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一步-连接器"}},[s._v("#")]),s._v(" 第一步：连接器")]),s._v(" "),t("p",[s._v("如果你在 Linux 操作系统里要使用 MySQL，那你第一步肯定是要先连接 MySQL 服务，然后才能执行 SQL 语句，普遍我们都是使用下面这条命令进行连接：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -h 指定 MySQL 服务得 IP 地址，如果是连接本地的 MySQL服务，可以不用这个参数；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -u 指定用户名，管理员角色名为 root；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p 指定密码，如果命令行中不填写密码（为了密码安全，建议不要在命令行写密码），就需要在交互对话里面输入密码")]),s._v("\nmysql -h"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ip")]),s._v(" -u"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v("\n")])])]),t("p",[s._v("连接的过程需要先经过 TCP 三次握手，因为 MySQL 是基于 TCP 协议进行传输的，如果 MySQL 服务并没有启动，则会收到如下的报错：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/mysql%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF.png",alt:"img"}})]),s._v(" "),t("p",[s._v('如果 MySQL 服务正常运行，完成 TCP 连接的建立后，连接器就要开始验证你的用户名和密码，如果用户名或密码不对，就收到一个"Access denied for user"的错误，然后客户端程序结束执行。')]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF.png",alt:"img"}})]),s._v(" "),t("p",[s._v("如果用户密码都没有问题，连接器就会获取该用户的权限，然后保存起来，后续该用户在此连接里的任何操作，都会基于连接开始时读到的权限进行权限逻辑的判断。")]),s._v(" "),t("p",[s._v("所以，如果一个用户已经建立了连接，即使管理员中途修改了该用户的权限，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。")]),s._v(" "),t("blockquote",[t("p",[s._v("如何查看 MySQL 服务被多少个客户端连接了？")])]),s._v(" "),t("p",[s._v("如果你想知道当前 MySQL 服务被多少个客户端连接了，你可以执行 "),t("code",[s._v("show processlist")]),s._v(" 命令进行查看。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E6%9F%A5%E7%9C%8B%E8%BF%9E%E6%8E%A5.png",alt:"img"}})]),s._v(" "),t("p",[s._v("比如上图的显示结果，共有两个用户名为 root 的用户连接了 MySQL 服务，其中 id 为 6 的用户的 Command 列的状态为 "),t("code",[s._v("Sleep")]),s._v(" ，这意味着该用户连接完 MySQL 服务就没有再执行过任何命令，也就是说这是一个空闲的连接，并且空闲的时长是 736 秒（ Time 列）。")]),s._v(" "),t("blockquote",[t("p",[s._v("空闲连接会一直占用着吗？")])]),s._v(" "),t("p",[s._v("当然不是了，MySQL 定义了空闲连接的最大空闲时长，由 "),t("code",[s._v("wait_timeout")]),s._v(" 参数控制的，默认值是 8 小时（28880秒），如果空闲连接超过了这个时间，连接器就会自动将它断开。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'wait_timeout'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---------------+-------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Variable_name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---------------+-------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" wait_timeout  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("28800")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---------------+-------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("当然，我们自己也可以手动断开空闲的连接，使用的是 kill connection + id 的命令。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("kill")]),s._v(" connection "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nQuery OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" affected "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("一个处于空闲状态的连接被服务端主动断开后，这个客户端并不会马上知道，等到客户端在发起下一个请求的时候，才会收到这样的报错“ERROR 2013 (HY000): Lost connection to MySQL server during query”。")]),s._v(" "),t("blockquote",[t("p",[s._v("MySQL 的连接数有限制吗？")])]),s._v(" "),t("p",[s._v("MySQL 服务支持的最大连接数由 max_connections 参数控制，比如我的 MySQL 服务默认是 151 个,超过这个值，系统就会拒绝接下来的连接请求，并报错提示“Too many connections”。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'max_connections'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----------------+-------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Variable_name   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----------------+-------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" max_connections "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("151")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----------------+-------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("MySQL 的连接也跟 HTTP 一样，有短连接和长连接的概念，它们的区别如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 短连接")]),s._v("\n连接 mysql 服务（TCP 三次握手）\n执行sql\n断开 mysql 服务（TCP 四次挥手）\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 长连接")]),s._v("\n连接 mysql 服务（TCP 三次握手）\n执行sql\n执行sql\n执行sql\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n断开 mysql 服务（TCP 四次挥手）\n")])])]),t("p",[s._v("可以看到，使用长连接的好处就是可以减少建立连接和断开连接的过程，所以一般是推荐使用长连接。")]),s._v(" "),t("p",[s._v("但是，使用长连接后可能会占用内存增多，因为 MySQL 在执行查询过程中临时使用内存管理连接对象，这些连接对象资源只有在连接断开时才会释放。如果长连接累计很多，将导致 MySQL 服务占用内存太大，有可能会被系统强制杀掉，这样会发生 MySQL 服务异常重启的现象。")]),s._v(" "),t("blockquote",[t("p",[s._v("怎么解决长连接占用内存的问题？")])]),s._v(" "),t("p",[s._v("有两种解决方式。")]),s._v(" "),t("p",[s._v("第一种，"),t("strong",[s._v("定期断开长连接")]),s._v("。既然断开连接后就会释放连接占用的内存资源，那么我们可以定期断开长连接。")]),s._v(" "),t("p",[s._v("第二种，"),t("strong",[s._v("客户端主动重置连接")]),s._v("。MySQL 5.7 版本实现了 "),t("code",[s._v("mysql_reset_connection()")]),s._v(" 函数的接口，注意这是接口函数不是命令，那么当客户端执行了一个很大的操作后，在代码里调用 mysql_reset_connection 函数来重置连接，达到释放内存的效果。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。")]),s._v(" "),t("p",[s._v("至此，连接器的工作做完了，简单总结一下：")]),s._v(" "),t("ul",[t("li",[s._v("与客户端进行 TCP 三次握手建立连接；")]),s._v(" "),t("li",[s._v("校验客户端的用户名和密码，如果用户名或密码不对，则会报错；")]),s._v(" "),t("li",[s._v("如果用户名和密码都对了，会读取该用户的权限，然后后面的权限逻辑判断都基于此时读取到的权限；")])]),s._v(" "),t("h2",{attrs:{id:"第二步-查询缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二步-查询缓存"}},[s._v("#")]),s._v(" 第二步：查询缓存")]),s._v(" "),t("p",[s._v("连接器得工作完成后，客户端就可以向 MySQL 服务发送 SQL 语句了，MySQL 服务收到 SQL 语句后，就会解析出 SQL 语句的第一个字段，看看是什么类型的语句。")]),s._v(" "),t("p",[s._v("如果 SQL 是查询语句（select 语句），MySQL 就会先去查询缓存（ Query Cache ）里查找缓存数据，看看之前有没有执行过这一条命令，这个查询缓存是以 key-value 形式保存在内存中的，key 为 SQL 查询语句，value 为 SQL 语句查询的结果。")]),s._v(" "),t("p",[s._v("如果查询的语句命中查询缓存，那么就会直接返回 value 给客户端。如果查询的语句没有命中查询缓存中，那么就要往下继续执行，等执行完后，查询的结果就会被存入查询缓存中。")]),s._v(" "),t("p",[s._v("这么看，查询缓存还挺有用，但是其实"),t("strong",[s._v("查询缓存挺鸡肋")]),s._v("的。")]),s._v(" "),t("p",[s._v("对于更新比较频繁的表，查询缓存的命中率很低的，因为只要一个表有更新操作，那么这个表的查询缓存就会被清空。如果刚缓存了一个查询结果很大的数据，还没被使用的时候，刚好这个表有更新操作，查询缓冲就被清空了，相当于缓存了个寂寞。")]),s._v(" "),t("p",[s._v("所以，MySQL 8.0 版本直接将查询缓存删掉了，也就是说 MySQL 8.0 开始，执行一条 SQL 查询语句，不会再走到查询缓存这个阶段了。")]),s._v(" "),t("p",[s._v("对于 MySQL 8.0 之前的版本，如果想关闭查询缓存，我们可以通过将参数 query_cache_type 设置成 DEMAND。")]),s._v(" "),t("p",[s._v("TIP")]),s._v(" "),t("p",[s._v("这里说的查询缓存是 server 层的，也就是 MySQL 8.0 版本移除的是 server 层的查询缓存，并不是 Innodb 存储引擎中的 buffer pool。")]),s._v(" "),t("h2",{attrs:{id:"第三步-解析-sql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三步-解析-sql"}},[s._v("#")]),s._v(" 第三步：解析 SQL")]),s._v(" "),t("p",[s._v("在正式执行 SQL 查询语句之前， MySQL 会先对 SQL 语句做解析，这个工作交由「解析器」来完成。")]),s._v(" "),t("h3",{attrs:{id:"解析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析器"}},[s._v("#")]),s._v(" 解析器")]),s._v(" "),t("p",[s._v("解析器会做如下两件事情。")]),s._v(" "),t("p",[s._v("第一件事情，"),t("strong",[s._v("词法分析")]),s._v("。MySQL 会根据你输入的字符串识别出关键字出来，例如，SQL语句 select username from userinfo，在分析之后，会得到4个Token，其中有2个Keyword，分别为select和from：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("关键字")]),s._v(" "),t("th",[s._v("非关键字")]),s._v(" "),t("th",[s._v("关键字")]),s._v(" "),t("th",[s._v("非关键字")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("select")]),s._v(" "),t("td",[s._v("username")]),s._v(" "),t("td",[s._v("from")]),s._v(" "),t("td",[s._v("userinfo")])])])]),s._v(" "),t("p",[s._v("第二件事情，"),t("strong",[s._v("语法分析")]),s._v("。根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com//picgo/db-mysql-sql-parser-2.png",alt:"img"}})]),s._v(" "),t("p",[s._v("如果我们输入的 SQL 语句语法不对，就会在解析器这个阶段报错。比如，我下面这条查询语句，把 from 写成了 form，这时 MySQL 解析器就会给报错。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF.png",alt:"img"}})]),s._v(" "),t("p",[s._v("但是注意，表不存在或者字段不存在，并不是在解析器里做的，《MySQL 45 讲》说是在解析器做的，但是经过我和朋友看 MySQL 源码（5.7和8.0）得出结论是解析器只负责检查语法和构建语法树，但是不会去查表或者字段存不存在。")]),s._v(" "),t("p",[s._v("那到底谁来做检测表和字段是否存在的工作呢？别急，接下来就是了。")]),s._v(" "),t("h2",{attrs:{id:"第四步-执行-sql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四步-执行-sql"}},[s._v("#")]),s._v(" 第四步：执行 SQL")]),s._v(" "),t("p",[s._v("经过解析器后，接着就要进入执行 SQL 查询语句的流程了，每条 "),t("code",[s._v("SELECT")]),s._v(" 查询语句流程主要可以分为下面这三个阶段：")]),s._v(" "),t("ul",[t("li",[s._v("prepare 阶段，也就是预处理阶段；")]),s._v(" "),t("li",[s._v("optimize 阶段，也就是优化阶段；")]),s._v(" "),t("li",[s._v("execute 阶段，也就是执行阶段；")])]),s._v(" "),t("h3",{attrs:{id:"预处理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预处理器"}},[s._v("#")]),s._v(" 预处理器")]),s._v(" "),t("p",[s._v("我们先来说说预处理阶段做了什么事情。")]),s._v(" "),t("ul",[t("li",[s._v("检查 SQL 查询语句中的表或者字段是否存在；")]),s._v(" "),t("li",[s._v("将 "),t("code",[s._v("select *")]),s._v(" 中的 "),t("code",[s._v("*")]),s._v(" 符号，扩展为表上的所有列；")])]),s._v(" "),t("p",[s._v("我下面这条查询语句，test 这张表是不存在的，这时 MySQL 就会在执行 SQL 查询语句的 prepare 阶段中报错。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nERROR "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1146")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("S02"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql.test'")]),s._v(" doesn't exist\n")])])]),t("p",[s._v("这里贴个 MySQL 8.0 源码来证明表或字段是否存在的判断，不是在解析器里做的，而是在 prepare 阶段。（"),t("em",[s._v("PS：下图是公众号「一树一溪」老哥帮我分析的，这位老哥专门写 MySQL 源码文章，感兴趣的朋友，可以微信搜索关注")]),s._v("）")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E8%A1%A8%E4%B8%8D%E5%AD%98%E5%9C%A8.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("上面的中间部分是 MySQL 报错表不存在时的函数调用栈，可以看到表不存在的错误是在get_table_share() 函数里报错的，而这个函数是在 prepare 阶段调用的。")]),s._v(" "),t("p",[s._v("不过，对于 MySQL 5.7 判断表或字段是否存在的工作，是在词法分析&语法分析之后，prepare 阶段之前做的。结论都一样，不是在解析器里做的。代码我就不放了，正因为 MySQL 5.7 代码结构不好，所以 MySQL 8.0 代码结构变化很大，后来判断表或字段是否存在的工作就被放入到 prepare 阶段做了。")]),s._v(" "),t("h3",{attrs:{id:"优化器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化器"}},[s._v("#")]),s._v(" 优化器")]),s._v(" "),t("p",[s._v("经过预处理阶段后，还需要为 SQL 查询语句先制定一个执行计划，这个工作交由「优化器」来完成的。")]),s._v(" "),t("p",[t("strong",[s._v("优化器主要负责将 SQL 查询语句的执行方案确定下来")]),s._v("，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。")]),s._v(" "),t("p",[s._v("当然，我们本次的查询语句（select * from product where id = 1）很简单，就是选择使用主键索引。")]),s._v(" "),t("p",[s._v("要想知道优化器选择了哪个索引，我们可以在查询语句最前面加个 "),t("code",[s._v("explain")]),s._v(" 命令，这样就会输出这条 SQL 语句的执行计划，然后执行计划中的 key 就表示执行过程中使用了哪个索引，比如下图的 key 为 "),t("code",[s._v("PRIMARY")]),s._v(" 就是使用了主键索引。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png",alt:"img"}})]),s._v(" "),t("p",[s._v("如果查询语句的执行计划里的 key 为 null 说明没有使用索引，那就会全表扫描（type = ALL），这种查询扫描的方式是效率最低档次的，如下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F.png",alt:"img"}})]),s._v(" "),t("p",[s._v("这张 product 表只有一个索引就是主键，现在我在表中将 name 设置为普通索引（二级索引）。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E4%BA%A7%E5%93%81%E8%A1%A8.png",alt:"img"}})]),s._v(" "),t("p",[s._v("这时 product 表就有主键索引（id）和普通索引（name）。假设执行了这条查询语句：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这条查询语句的结果既可以使用主键索引，也可以使用普通索引，但是执行的效率会不同。这时，就需要优化器来决定使用哪个索引了。")]),s._v(" "),t("p",[s._v("很显然这条查询语句是"),t("strong",[s._v("覆盖索引")]),s._v("，直接在二级索引就能查找到结果（因为二级索引的 B+ 树的叶子节点的数据存储的是主键值），就没必要在主键索引查找了，因为查询主键索引的 B+ 树的成本会比查询二级索引的 B+ 的成本大，优化器基于查询成本的考虑，会选择查询代价小的普通索引。")]),s._v(" "),t("p",[s._v("在下图中执行计划，我们可以看到，执行过程中使用了普通索引（name），Exta 为 Using index，这就是表明使用了覆盖索引优化。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E9%80%89%E6%8B%A9%E7%B4%A2%E5%BC%95.png",alt:"img"}})]),s._v(" "),t("h3",{attrs:{id:"执行器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行器"}},[s._v("#")]),s._v(" 执行器")]),s._v(" "),t("p",[s._v("经历完优化器后，就确定了执行方案，接下来 MySQL 就真正开始执行语句了，这个工作是由「执行器」完成的。在执行的过程中，执行器就会和存储引擎交互了，交互是以记录为单位的。")]),s._v(" "),t("p",[s._v("接下来，用三种方式执行过程，跟大家说一下执行器和存储引擎的交互过程（PS ：为了写好这一部分，特地去看 MySQL 源码，也是第一次看哈哈）。")]),s._v(" "),t("ul",[t("li",[s._v("主键索引查询")]),s._v(" "),t("li",[s._v("全表扫描")]),s._v(" "),t("li",[s._v("索引下推")])]),s._v(" "),t("h4",{attrs:{id:"主键索引查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键索引查询"}},[s._v("#")]),s._v(" 主键索引查询")]),s._v(" "),t("p",[s._v("以本文开头查询语句为例，看看执行器是怎么工作的。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这条查询语句的查询条件用到了主键索引，而且是等值查询，同时主键 id 是唯一，不会有 id 相同的记录，所以优化器决定选用访问类型为 const 进行查询，也就是使用主键索引查询一条记录，那么执行器与存储引擎的执行流程是这样的：")]),s._v(" "),t("ul",[t("li",[s._v("执行器第一次查询，会调用 read_first_record 函数指针指向的函数，因为优化器选择的访问类型为 const，这个函数指针被指向为 InnoDB 引擎索引查询的接口，把条件 "),t("code",[s._v("id = 1")]),s._v(" 交给存储引擎，"),t("strong",[s._v("让存储引擎定位符合条件的第一条记录")]),s._v("。")]),s._v(" "),t("li",[s._v("存储引擎通过主键索引的 B+ 树结构定位到 id = 1的第一条记录，如果记录是不存在的，就会向执行器上报记录找不到的错误，然后查询结束。如果记录是存在的，就会将记录返回给执行器；")]),s._v(" "),t("li",[s._v("执行器从存储引擎读到记录后，接着判断记录是否符合查询条件，如果符合则发送给客户端，如果不符合则跳过该记录。")]),s._v(" "),t("li",[s._v("执行器查询的过程是一个 while 循环，所以还会再查一次，但是这次因为不是第一次查询了，所以会调用 read_record 函数指针指向的函数，因为优化器选择的访问类型为 const，这个函数指针被指向为一个永远返回 - 1 的函数，所以当调用该函数的时候，执行器就退出循环，也就是结束查询了。")])]),s._v(" "),t("p",[s._v("至此，这个语句就执行完成了。")]),s._v(" "),t("h4",{attrs:{id:"全表扫描"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全表扫描"}},[s._v("#")]),s._v(" 全表扫描")]),s._v(" "),t("p",[s._v("举个全表扫描的例子：")]),s._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("select * from product where name = 'iphone';\n")])])]),t("p",[s._v("这条查询语句的查询条件没有用到索引，所以优化器决定选用访问类型为 ALL 进行查询，也就是全表扫描的方式查询，那么这时执行器与存储引擎的执行流程是这样的：")]),s._v(" "),t("ul",[t("li",[s._v("执行器第一次查询，会调用 read_first_record 函数指针指向的函数，因为优化器选择的访问类型为 all，这个函数指针被指向为 InnoDB 引擎全扫描的接口，"),t("strong",[s._v("让存储引擎读取表中的第一条记录")]),s._v("；")]),s._v(" "),t("li",[s._v("执行器会判断读到的这条记录的 name 是不是 iphone，如果不是则跳过；如果是则将记录发给客户的（是的没错，Server 层每从存储引擎读到一条记录就会发送给客户端，之所以客户端显示的时候是直接显示所有记录的，是因为客户端是等查询语句查询完成后，才会显示出所有的记录）。")]),s._v(" "),t("li",[s._v("执行器查询的过程是一个 while 循环，所以还会再查一次，会调用 read_record 函数指针指向的函数，因为优化器选择的访问类型为 all，read_record 函数指针指向的还是 InnoDB 引擎全扫描的接口，所以接着向存储引擎层要求继续读刚才那条记录的下一条记录，存储引擎把下一条记录取出后就将其返回给执行器（Server层），执行器继续判断条件，不符合查询条件即跳过该记录，否则发送到客户端；")]),s._v(" "),t("li",[s._v("一直重复上述过程，直到存储引擎把表中的所有记录读完，然后向执行器（Server层） 返回了读取完毕的信息；")]),s._v(" "),t("li",[s._v("执行器收到存储引擎报告的查询完毕的信息，退出循环，停止查询。")])]),s._v(" "),t("p",[s._v("至此，这个语句就执行完成了。")]),s._v(" "),t("h4",{attrs:{id:"索引下推"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引下推"}},[s._v("#")]),s._v(" 索引下推")]),s._v(" "),t("p",[s._v("在这部分非常适合讲索引下推（MySQL 5.6 推出的查询优化策略），这样大家能清楚的知道，「下推」这个动作，下推到了哪里。")]),s._v(" "),t("p",[s._v("索引下推能够减少"),t("strong",[s._v("二级索引")]),s._v("在查询时的回表操作，提高查询的效率，因为它将 Server 层部分负责的事情，交给存储引擎层去处理了。")]),s._v(" "),t("p",[s._v("举一个具体的例子，方便大家理解，这里一张用户表如下，我对 age 和 reward 字段建立了联合索引（age，reward）：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E8%B7%AF%E9%A3%9E%E8%A1%A8.png",alt:"img"}})]),s._v(" "),t("p",[s._v("现在有下面这条查询语句：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t_user  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" reward "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("联合索引当遇到范围查询 (>、<) 就会停止匹配，也就是 "),t("strong",[s._v("age 字段能用到联合索引，但是 reward 字段则无法利用到索引")]),s._v("。具体原因这里可以看这篇："),t("a",{attrs:{href:"https://xiaolincoding.com/mysql/index/index_interview.html#%E6%8C%89%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[s._v("索引常见面试题(opens new window)"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("那么，不使用索引下推（MySQL 5.6 之前的版本）时，执行器与存储引擎的执行流程是这样的：")]),s._v(" "),t("ul",[t("li",[s._v("Server 层首先调用存储引擎的接口定位到满足查询条件的第一条二级索引记录，也就是定位到 age > 20 的第一条记录；")]),s._v(" "),t("li",[s._v("存储引擎根据二级索引的 B+ 树快速定位到这条记录后，获取主键值，然后"),t("strong",[s._v("进行回表操作")]),s._v("，将完整的记录返回给 Server 层；")]),s._v(" "),t("li",[s._v("Server 层在判断该记录的 reward 是否等于 100000，如果成立则将其发送给客户端；否则跳过该记录；")]),s._v(" "),t("li",[s._v("接着，继续向存储引擎索要下一条记录，存储引擎在二级索引定位到记录后，获取主键值，然后回表操作，将完整的记录返回给 Server 层；")]),s._v(" "),t("li",[s._v("如此往复，直到存储引擎把表中的所有记录读完。")])]),s._v(" "),t("p",[s._v("可以看到，没有索引下推的时候，每查询到一条二级索引记录，都要进行回表操作，然后将记录返回给 Server，接着 Server 再判断该记录的 reward 是否等于 100000。")]),s._v(" "),t("p",[s._v("而使用索引下推后，判断记录的 reward 是否等于 100000 的工作交给了存储引擎层，过程如下 ：")]),s._v(" "),t("ul",[t("li",[s._v("Server 层首先调用存储引擎的接口定位到满足查询条件的第一条二级索引记录，也就是定位到 age > 20 的第一条记录；")]),s._v(" "),t("li",[s._v("存储引擎定位到二级索引后，"),t("strong",[s._v("先不执行回表")]),s._v("操作，而是先判断一下该索引中包含的列（reward列）的条件（reward 是否等于 100000）是否成立。如果"),t("strong",[s._v("条件不成立")]),s._v("，则直接"),t("strong",[s._v("跳过该二级索引")]),s._v("。如果"),t("strong",[s._v("成立")]),s._v("，则"),t("strong",[s._v("执行回表")]),s._v("操作，将完成记录返回给 Server 层。")]),s._v(" "),t("li",[s._v("Server 层在判断其他的查询条件（本次查询没有其他条件）是否成立，如果成立则将其发送给客户端；否则跳过该记录，然后向存储引擎索要下一条记录。")]),s._v(" "),t("li",[s._v("如此往复，直到存储引擎把表中的所有记录读完。")])]),s._v(" "),t("p",[s._v("可以看到，使用了索引下推后，虽然 reward 列无法使用到联合索引，但是因为它包含在联合索引（age，reward）里，所以直接在存储引擎过滤出满足 reward = 100000 的记录后，才去执行回表操作获取整个记录。相比于没有使用索引下推，节省了很多回表操作。")]),s._v(" "),t("p",[s._v("当你发现执行计划里的 Extr 部分显示了 “Using index condition”，说明使用了索引下推。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png",alt:"img"}})]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("总结")]),s._v(" "),t("p",[s._v("执行一条 SQL 查询语句，期间发生了什么？")]),s._v(" "),t("ul",[t("li",[s._v("连接器：建立连接，管理连接、校验用户身份；")]),s._v(" "),t("li",[s._v("查询缓存：查询语句如果命中查询缓存则直接返回，否则继续往下执行。MySQL 8.0 已删除该模块；")]),s._v(" "),t("li",[s._v("解析 SQL，通过解析器对 SQL 查询语句进行词法分析、语法分析，然后构建语法树，方便后续模块读取表名、字段、语句类型；")]),s._v(" "),t("li",[s._v("执行 SQL：执行 SQL 共有三个阶段：\n"),t("ul",[t("li",[s._v("预处理阶段：检查表或字段是否存在；将 "),t("code",[s._v("select *")]),s._v(" 中的 "),t("code",[s._v("*")]),s._v(" 符号扩展为表上的所有列。")]),s._v(" "),t("li",[s._v("优化阶段：基于查询成本的考虑， 选择查询成本最小的执行计划；")]),s._v(" "),t("li",[s._v("执行阶段：根据执行计划执行 SQL 查询语句，从存储引擎读取记录，返回给客户端；")])])])]),s._v(" "),t("p",[s._v("怎么样？现在再看这张图，是不是很清晰了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/mysql%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B.png",alt:"查询语句执行流程"}})]),s._v(" "),t("p",[s._v("完！")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("参考资料：")]),s._v(" "),t("ul",[t("li",[s._v("《MySQL 45 讲》")]),s._v(" "),t("li",[s._v("《MySQL是怎样运行的：从根儿上理解MySQL》")]),s._v(" "),t("li",[s._v("https://gohalo.me/post/mysql-executor.html")]),s._v(" "),t("li",[s._v("http://www.iskm.org/mysql56/sql__executor_8cc_source.html")]),s._v(" "),t("li",[s._v("https://tangocc.github.io/2018/10/11/mysql-sourcecode/")])])])}),[],!1,null,null,null);t.default=r.exports}}]);